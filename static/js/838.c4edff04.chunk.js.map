{"version":3,"file":"static/js/838.c4edff04.chunk.js","mappings":"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","sources":["helpers/mapFunction.js","components/BaseMap.js","components/charts/BarChart.js","components/charts/LineChart.js","components/charts/MonthlyBarChart.js","components/FiltererdJsonFeature.js","helpers/functions.js","components/legend/DynamicLegend.js","pages/HomePage.js"],"sourcesContent":["import * as L from \"leaflet\";\n\nexport const BaseMapsLayers = [\n    {\n        name: \"Google Map\",\n        url: 'https://{s}.google.com/vt/lyrs=m&x={x}&y={y}&z={z}',\n        subdomains: ['mt0', 'mt1', 'mt2', 'mt3'],\n        attribution: \"Basemap: &copy;2024 Google\"\n    },\n    {\n        name: \"Hybrid Map\",\n        url: 'https://{s}.google.com/vt/lyrs=s,h&x={x}&y={y}&z={z}',\n        subdomains: ['mt0', 'mt1', 'mt2', 'mt3'],\n        attribution: \"Basemap: &copy;2024 NASA, TerraMetrics <a href='https://www.google.com/intl/en-US_US/help/terms_maps/'> Terms</a>\"\n    },\n\n\n    // {\n    //     name: \"Street Map\",\n    //     url: 'https://server.arcgisonline.com/ArcGIS/rest/services/World_Street_Map/MapServer/tile/{z}/{y}/{x}',\n    //     subdomains: ['a', 'b', 'c'],\n    //     attribution: 'Basemap: Esri, TomTom, FAO, NOAA, USGS'\n    // },\n\n\n\n    {\n      name: \"Open Street Map\",\n      url: 'https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png',\n      subdomains: ['a', 'b', 'c'],\n      attribution:'&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\n    },\n    // {\n    //     name: \"Topographic Map\",\n    //     url: 'https://{s}.tile.opentopomap.org/{z}/{x}/{y}.png',\n    //     subdomains: ['a', 'b', 'c'],\n    //     attribution: 'Basemap:: &copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors, <a href=\"http://viewfinderpanoramas.org\">SRTM</a> </a>'\n    // },\n    // {\n    //     name: \"Satellite Map\",\n    //     url: 'https://{s}.google.com/vt/lyrs=s&x={x}&y={y}&z={z}',\n    //     subdomains: ['mt0', 'mt1', 'mt2', 'mt3'],\n    //     attribution: \"Basemap: &copy;2024 Google\"\n    // },\n    // {\n    //     name: \"Physical Map\",\n    //     url: 'https://server.arcgisonline.com/ArcGIS/rest/services/World_Physical_Map/MapServer/tile/{z}/{y}/{x}',\n    //     subdomains: ['a', 'b', 'c'],\n    //     attribution: \"Basemap: &copy; Esri &mdash; Source: US National Park Service\"\n    // },\n\n    // {\n    //     name: \"Terrain Map\",\n    //     url: 'https://{s}.google.com/vt/lyrs=p&x={x}&y={y}&z={z}',\n    //     subdomains: ['mt0', 'mt1', 'mt2', 'mt3'],\n    //     attribution: \"&copy;2024 Google\"\n    // },\n    // {\n    //     name: \"Google Roads Map\",\n    //     url: 'https://{s}.google.com/vt/lyrs=h&x={x}&y={y}&z={z}',\n    //     subdomains: ['mt0', 'mt1', 'mt2', 'mt3'],\n    //     attribution: \"&copy;2024 Google\"\n    // },\n\n]\n\n\n\n\n// export const mapCenter = [24.961018, 55.150827]\nexport const mapCenter = [24.961000, 55.15200]\n\nexport const setInitialMapZoom = () => {\n    var viewportWidth = window.innerWidth;\n    var mapZoom;\n    if (viewportWidth <= [767]) {\n        mapZoom = [17];\n    } if (viewportWidth >= [768]) {\n        mapZoom = [17];\n    } if (viewportWidth >= [1600]) {\n        mapZoom = [17];\n    }\n    return mapZoom;\n}\n\nexport const setDragging = () => {\n    var viewportWidth = window.innerWidth;\n    var dragging;\n    if (viewportWidth <= [767]) {\n        dragging = false;\n    } if (viewportWidth >= [768]) {\n        dragging = true;\n    }\n    return dragging;\n}\n\n\n\n\nexport const maxBounds = L.latLngBounds(\n    L.latLng(23, 49),  \n    L.latLng(43, 82)  \n);\n\n","import React, { useState } from 'react'\nimport { TileLayer, GeoJSON, LayersControl, FeatureGroup, ScaleControl, useMap, useMapEvents } from 'react-leaflet'\n// import L from 'leaflet';\nimport { FaHome } from \"react-icons/fa\";\nimport { BaseMapsLayers, mapCenter, setInitialMapZoom } from '../helpers/mapFunction';\n\n\n\nconst BaseMap = () => {\n  const [mousePosition, setMousePosition] = useState({ lat: 0, lng: 0 });\n  const map = useMap();\n\n  const HandleMouseHover = () => {\n    useMapEvents({\n      mousemove: (e) => {\n        setMousePosition(e.latlng);\n      },\n    });\n    return null;\n  };\n\n\n  const handleZoomToCenter = () => {\n    map.setView(mapCenter, setInitialMapZoom());\n  };\n\n\n\n  return (\n    <>\n          <LayersControl position=\"topright\" collapsed={false}>\n        {BaseMapsLayers.map((layer, index) => {\n          return (\n            <LayersControl.BaseLayer\n              key={index}\n              checked={index === 0 ? true : false}\n              name={layer.name}\n            >\n              <TileLayer\n                attribution={layer.attribution}\n                url={layer.url}\n                subdomains={layer.subdomains}\n              />\n            </LayersControl.BaseLayer>\n          )\n        })}\n\n\n\n\n      </LayersControl>\n\n\n      <HandleMouseHover />\n{/* \n      <div\n        className='coordinates_container' >\n        Lat: {mousePosition.lat.toFixed(4)}, Long:{\" \"}\n        {mousePosition.lng.toFixed(4)}\n      </div> */}\n      <button className='zoom_btn' onClick={handleZoomToCenter}><FaHome /></button>\n      <ScaleControl />\n    </>\n  )\n}\n\nexport default BaseMap","import React from 'react';\nimport ReactApexChart from 'react-apexcharts';\n\n\nconst BarChart = ({selectedData}) => {\n\n    const xData = [\n        2019,2020,2021,2022,2023\n    ];\n\n    // Get corresponding values for each month\n    const yData = [\n        selectedData[\"TOTAL_2019\"], selectedData[\"TOTAL_2020\"], selectedData[\"TOTAL_2021\"], selectedData[\"TOTAL_2022\"], selectedData[\"TOTAL_2023\"], \n    ];\n\n\n    const options = {\n        chart: {\n            height: '100%',\n            type: 'bar',\n            zoom: {\n                enabled: false, // Disable zoom on scroll\n              },\n        },\n\n        stroke: {\n            curve: 'straight',\n            width: 2\n          },\n        series: [\n            {\n                name: 'Rates (AED)',\n                type: 'bar',\n                data: yData,\n                color: '#011a52',\n                \n            },\n        ],\n        xaxis: {\n            \n            categories: xData,\n            labels: {\n              rotate: 0,\n            },\n            tickPlacement: 'on',\n          },\n\n\n        yaxis: {\n            title: {\n                text: 'Rates (AED)'\n            }\n        },\n        tooltip: {\n            shared: true,\n            intersect: false,\n\n        },\n\n    };\n\n    return (\n        <div>\n            <ReactApexChart options={options} series={options.series} type=\"bar\" />\n        </div>\n    );\n}\n\nexport default BarChart;\n","import React from 'react';\nimport ReactApexChart from 'react-apexcharts';\n\n\nconst LineChart = ({selectedData}) => {\n\n    const xData = [\n        \"Jan-21\", \"Feb-21\", \"Mar-21\", \"Apr-21\", \"May-21\", \"Jun-21\", \"Jul-21\", \"Aug-21\", \"Sep-21\", \"Oct-21\", \"Nov-21\", \"Dec-21\",\n        \"Jan-22\", \"Feb-22\", \"Mar-22\", \"Apr-22\", \"May-22\", \"Jun-22\", \"Jul-22\", \"Aug-22\", \"Sep-22\", \"Oct-22\", \"Nov-22\", \"Dec-22\",\n        \"Jan-23\", \"Feb-23\", \"Mar-23\", \"Apr-23\", \"May-23\", \"Jun-23\", \"Jul-23\", \"Aug-23\", \"Sep-23\", \"Oct-23\", \"Nov-23\", \"Dec-23\",\n        \"Jan-24\", \"Feb-24\", \"Mar-24\", \"Apr-24\", \"May-24\", \"Jun-24\", \"Jul-24\", \"Aug-24\"\n    ];\n\n    // Get corresponding values for each month\n    const yData = [\n        selectedData[\"Jan-21\"], selectedData[\"Feb-21\"], selectedData[\"Mar-21\"], selectedData[\"Apr-21\"], selectedData[\"May-21\"], selectedData[\"Jun-21\"],\n        selectedData[\"Jul-21\"], selectedData[\"Aug-21\"], selectedData[\"Sep-21\"], selectedData[\"Oct-21\"], selectedData[\"Nov-21\"], selectedData[\"Dec-21\"],\n        selectedData[\"Jan-22\"], selectedData[\"Feb-22\"], selectedData[\"Mar-22\"], selectedData[\"Apr-22\"], selectedData[\"May-22\"], selectedData[\"Jun-22\"],\n        selectedData[\"Jul-22\"], selectedData[\"Aug-22\"], selectedData[\"Sep-22\"], selectedData[\"Oct-22\"], selectedData[\"Nov-22\"], selectedData[\"Dec-22\"],\n        selectedData[\"Jan-23\"], selectedData[\"Feb-23\"], selectedData[\"Mar-23\"], selectedData[\"Apr-23\"], selectedData[\"May-23\"], selectedData[\"Jun-23\"],\n        selectedData[\"Jul-23\"], selectedData[\"Aug-23\"], selectedData[\"Sep-23\"], selectedData[\"Oct-23\"], selectedData[\"Nov-23\"], selectedData[\"Dec-23\"],\n        selectedData[\"Jan-24\"], selectedData[\"Feb-24\"], selectedData[\"Mar-24\"], selectedData[\"Apr-24\"], selectedData[\"May-24\"], selectedData[\"Jun-24\"],\n        selectedData[\"Jul-24\"], selectedData[\"Aug-24\"]\n    ];\n\n    const options = {\n        chart: {\n            height: '100%',\n            type: 'line',\n            zoom: {\n                enabled: false, // Disable zoom on scroll\n              },\n        },\n        stroke: {\n            curve: 'straight',\n            width: 2\n          },\n        series: [\n            {\n                name: 'Rates (AED)',\n                type: 'line',\n                data: yData,\n                color: '#02ab6d',\n                \n            },\n        ],\n        xaxis: {\n            \n            categories: xData,\n            labels: {\n              rotate: 0,\n            },\n            tickPlacement: 'on',\n          },\n\n\n        yaxis: {\n            title: {\n                text: 'Rates (AED)'\n            }\n        },\n        tooltip: {\n            shared: true,\n            intersect: false,\n        },\n\n    };\n\n    return (\n        <div>\n            <ReactApexChart options={options} series={options.series} type=\"line\" />\n        </div>\n    );\n}\n\nexport default LineChart;\n","import React, { useState } from 'react';\nimport ReactApexChart from 'react-apexcharts';\n\n\nconst MonthlyBarChart = ({ selectedData }) => {\n    const [selectedMonth, setSelectedMonth] = useState('Jan');\n\n    const handleMonthSelection = (e) => {\n        setSelectedMonth(e.target.value)\n    }\n\n    const xData = [2021, 2022, 2023];\n\n    // Define the y-axis data for each year\n    const yData = [\n        selectedData[`${selectedMonth}-21`] || 0, // Handle missing data with a default value of 0\n        selectedData[`${selectedMonth}-22`] || 0,\n        selectedData[`${selectedMonth}-23`] || 0,\n    ];\n\n    // Check if data for 2024 exists, and only add it if it exists\n    if (selectedData[`${selectedMonth}-24`] && selectedData[`${selectedMonth}-24`] !== undefined && selectedData[`${selectedMonth}-24`] !== null) {\n        xData.push(2024);\n        yData.push(selectedData[`${selectedMonth}-24`]);\n    }\n\n\n    const options = {\n        chart: {\n            height: '100%',\n            type: 'bar',\n            zoom: {\n                enabled: false, // Disable zoom on scroll\n              },\n        },\n        stroke: {\n            curve: 'straight',\n            width: 2\n        },\n        series: [\n            {\n                name: `${selectedMonth} rates (AED)`,\n                type: 'bar',\n                data: yData,\n                color: '#ba7c00',\n\n            },\n        ],\n        xaxis: {\n\n            categories: xData,\n            labels: {\n                rotate: 0,\n            },\n            tickPlacement: 'on',\n        },\n\n\n        yaxis: {\n            title: {\n                text: `Rates (AED) in ${selectedMonth} month`,\n            }\n        },\n        tooltip: {\n            shared: true,\n            intersect: false,\n\n        },\n\n    };\n\n    return (\n        <>\n            <div className='chart_year_container' >\n                <label>Month: &nbsp; </label>\n                <select value={selectedMonth} onChange={handleMonthSelection} style={{ marginRight: \"10px\" }}>\n                    <option value=\"Jan\">January</option>\n                    <option value=\"Feb\">February</option>\n                    <option value=\"Mar\">March</option>\n                    <option value=\"Apr\">April</option>\n                    <option value=\"May\">May</option>\n                    <option value=\"Jun\">June</option>\n                    <option value=\"Jul\">July</option>\n                    <option value=\"Aug\">August</option>\n                    <option value=\"Sep\">September</option>\n                    <option value=\"Oct\">October</option>\n                    <option value=\"Nov\">November</option>\n                    <option value=\"Dec\">December</option>\n                </select>\n\n            </div>\n            <ReactApexChart options={options} series={options.series} type=\"bar\" />\n        </>\n    );\n}\n\nexport default MonthlyBarChart;\n","import React, { useEffect } from 'react';\nimport { GeoJSON, Pane, useMap } from 'react-leaflet';\nimport * as L from 'leaflet';\nimport { mapCenter, setDragging, setInitialMapZoom } from '../helpers/mapFunction';\nimport Buildings_Footprint from \"../assets/data/Buildings_Footprint.json\"\n\nconst FiltererdJsonFeature = ({selectedFeatureName}) => {\n\n    const map = useMap();\n    const intialZoom = setInitialMapZoom()\n\n\n\n    let filteredData = Buildings_Footprint.features.find(\n        (feature) => feature.properties.assetCode === selectedFeatureName\n    );\n\n\n\n\n    return (\n        // <Pane name=\"selected_features\" style={{ zIndex: 1000 }}>\n        <Pane name=\"selected_features\">\n            <GeoJSON\n                key={`${selectedFeatureName}`}\n                style={{ fillColor: 'none', weight: 4, color: 'yellow', fillOpacity: \"0.4\" }}\n                data={filteredData}\n            />\n        </Pane>\n    );\n};\n\nexport default FiltererdJsonFeature;\n","\nexport    const fillDensityColor = (ColorLegendsDataItem, density) => {\n  if (!ColorLegendsDataItem) return null;\n\n  // Check for density explicitly considering 0 as a valid value\n  if (density !== undefined && density !== null) {\n    const valueColorsMap = ColorLegendsDataItem.Value.map((value, index) => ({ value, color: ColorLegendsDataItem.Colors[index] }));\n\n    for (let i = 0; i < valueColorsMap.length; i++) {\n      if (density > valueColorsMap[i].value) {\n        return valueColorsMap[i].color;\n      }\n    }\n\n    // Default to the last color if no match found\n    return ColorLegendsDataItem.Colors[ColorLegendsDataItem.Colors.length - 1];\n  } else {\n    return \"white\";\n  }\n};\n","import React from 'react';\n\nconst DynamicLegend = ({ ColorLegendsDataItem, setSelectedYear, selectedYear }) => {\n    const { Title, Unit, Colors, Value } = ColorLegendsDataItem;\n\n    const reversedColors = [...Colors].reverse();\n    const reversedValues = [...Value].reverse();\n\n    const handleYearSelection = (e) => {\n        setSelectedYear(e.target.value)\n    }\n\n\n\n    return (\n        <div className=\"legend_container\">\n            Annual variation of utility charges (AED) in year &nbsp;\n            <select value={selectedYear} onChange={handleYearSelection} style={{ marginRight: \"10px\" }}>\n                <option value=\"2019\">2019</option>\n                <option value=\"2020\">2020</option>\n                <option value=\"2021\">2021</option>\n                <option value=\"2022\">2022</option>\n                <option value=\"2023\">2023</option>\n\n            </select>\n\n\n            <div className=\"legend-color-container\">\n            <div className=\"legend_item\">\n                <span\n                    className=\"legend_item_square\"\n                    style={{ backgroundColor: \"white\" }}\n                />\n                <span className=\"legend-label\">\n                    No Data\n                </span>\n                </div>\n\n\n                {reversedColors.map((color, index) => (\n                    <div key={index} className=\"legend_item\">\n                        <span\n                            className=\"legend_item_square\"\n                            style={{ backgroundColor: color }}\n                        />\n                        <span className=\"legend-label\">\n                            {index === reversedColors.length - 1 ? `> ${reversedValues[index]}` :\n                                // index === 0 ? `< ${reversedValues[index]}` :\n                                `${reversedValues[index]} — ${reversedValues[index + 1]}`}\n                        </span>\n                    </div>\n                ))}\n            </div>\n        </div>\n    );\n};\n\nexport default DynamicLegend;\n","import React, { useEffect, useState } from 'react'\nimport { MapContainer, GeoJSON, TileLayer } from 'react-leaflet'\nimport * as L from \"leaflet\";\nimport \"leaflet/dist/leaflet.css\"\nimport 'leaflet-fullscreen/dist/Leaflet.fullscreen.js';\nimport 'leaflet-fullscreen/dist/leaflet.fullscreen.css';\nimport BaseMap from '../components/BaseMap';\nimport { BaseMapsLayers, mapCenter, maxBounds, setDragging, setInitialMapZoom } from '../helpers/mapFunction';\nimport Buildings_Footprint from \"../assets/data/Buildings_Footprint.json\"\nimport BuildingData from \"../assets/data/BuildingData.json\"\n// import FiltererdJsonFeature from '../components/FiltererdJsonFeature.js';\n// import SelectedFeatureHeading from '../components/SelectedFeatureHeading.js';\nimport { useLoaderContext } from '../contexts/LoaderContext.js';\nimport BarChart from '../components/charts/BarChart.js';\nimport LineChart from '../components/charts/LineChart.js';\nimport MonthlyBarChart from '../components/charts/MonthlyBarChart.js';\nimport FiltererdJsonFeature from '../components/FiltererdJsonFeature.js';\nimport { fillDensityColor } from '../helpers/functions.js';\nimport DynamicLegend from '../components/legend/DynamicLegend.js';\n\n\nconst HomePage = () => {\n    const [selectedBasemapLayer, setSelectedBasemapLayer] = useState(BaseMapsLayers[0]);\n    const [selectedFeatureName, setSelectedFeatureName] = useState(\"5254\");\n    const [selectedData, setSelectedData] = useState(null);\n    const [selectedYear, setSelectedYear] = useState('2023');\n\n\n\n\n\n\n    const { setIsLoading } = useLoaderContext();\n\n\n    const handleBasemapSelection = (e) => {\n        const selectedItem = BaseMapsLayers.find((item) => item.name === e.target.value);\n        setSelectedBasemapLayer(selectedItem);\n    };\n\n    const filterFeatureData = () => {\n        if (selectedFeatureName) {\n            const filteredData = BuildingData.find((data) => data.ASSET_CODE === selectedFeatureName);\n            if (filteredData) {\n                setSelectedData(filteredData);\n            } else {\n                console.warn('No data found for the selected asset code:', selectedFeatureName);\n            }\n        }\n    }\n\n    useEffect(() => {\n        const filterFeatureData = () => {\n            if (selectedFeatureName) {\n                const filteredData = BuildingData.filter((data) => data.ASSET_CODE === selectedFeatureName);\n                if (filteredData) {\n                    setSelectedData(filteredData);\n                } else {\n                    console.warn('No data found for the selected asset code:', selectedFeatureName);\n                }\n            }\n        };\n        filterFeatureData();\n    }, [selectedFeatureName]);\n\n\n    const ColorLegendsDataItem = {\n        Title: \"Annual variation of utility charges\",\n        Unit: \"\",\n        Value: [60000, 40000, 20000, 10000, 5000, 1000, 0],\n        Colors: [\"#345ead\", \"#5ba8d2\", \"#c8ecf4\", \"#fffbb1\", \"#ffc469\", \"#ff7c3d\", \"#ca001b\"],\n\n    }\n\n\n\n\n\n    function DistrictOnEachfeature(feature, layer) {\n        // Determine the property name to use based on selectedView\n\n        // Click event handler\n        layer.on('click', function (e) {\n            setSelectedFeatureName(feature.properties[\"assetCode\"]);\n            if (feature.properties && feature.properties[\"assetCode\"]) {\n                const popupContent = `\n                    <div>\n                        Asset code: ${feature.properties[\"assetCode\"]}<br/>\n                    </div>\n                `;\n                layer.bindTooltip(popupContent, { sticky: true });\n            }\n            layer.openTooltip();\n\n        });\n    }\n\n\n\n\n    const DistrictStyle = (feature) => {\n\n        const getDensityFromData = (id) => {\n            const DataItem = BuildingData && BuildingData.find((item) => item.ASSET_CODE === id);\n            return DataItem && DataItem[`TOTAL_${selectedYear}`];\n\n\n        };\n        const density = getDensityFromData(feature.properties.assetCode);\n\n\n        return {\n            fillColor: fillDensityColor(ColorLegendsDataItem, density),\n            // fillColor: selectedTime !== '' ? Annual_Density(density) : \"none\",\n            weight: 1,\n            opacity: 1,\n            color: \"black\",\n            // dashArray: \"2\",\n            fillOpacity: 1,\n        };\n\n    };\n\n\n\n\n\n\n\n    return (\n        <div className='dasboard_page_container'>\n            <div className='main_dashboard'>\n\n\n                <div className='right_panel_equal' >\n                    <div className='card_container' style={{ height: \"100%\" }}>\n\n                        <MapContainer\n                            fullscreenControl={true}\n                            center={mapCenter}\n                            style={{ width: '100%', height: \"100%\", backgroundColor: 'white', border: 'none', margin: 'auto' }}\n                            zoom={setInitialMapZoom()}\n                            // maxBounds={maxBounds}\n                            zoomSnap={0.5}\n                            maxZoom={20}\n                            minZoom={setInitialMapZoom() - 1}\n                            keyboard={false}\n                            dragging={setDragging()}\n                            // attributionControl={false}\n                            // scrollWheelZoom={false}\n\n                            doubleClickZoom={false}\n                        >\n\n\n                            \n\n\n\n                            {/* <div className='map_layer_manager'>\n                                <div className=\"accordion\" id=\"accordionPanelsStayOpenExample\">\n                                    <div className=\"accordion-item\">\n                                        <h2 className=\"accordion-header\" id=\"panelsStayOpen-headingOne\">\n                                            <button className=\"accordion-button map_layer_collapse collapsed\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#panelsStayOpen-collapseOne\" aria-expanded=\"false\" aria-controls=\"panelsStayOpen-collapseOne\">\n                                                Base Map\n                                            </button>\n                                        </h2>\n                                        <div id=\"panelsStayOpen-collapseOne\" className=\"accordion-collapse collapse\" aria-labelledby=\"panelsStayOpen-headingOne\">\n                                            <div className=\"accordion-body map_layer_collapse_body\">\n                                                {BaseMapsLayers.map((option, index) => (\n                                                    <div key={index} className=\"form-check\">\n                                                        <input\n                                                            type=\"radio\"\n                                                            className=\"form-check-input\"\n                                                            id={option.name}\n                                                            name=\"data_type\"\n                                                            value={option.name}\n                                                            checked={selectedBasemapLayer?.name === option.name}\n                                                            onChange={handleBasemapSelection}\n                                                        />\n                                                        <label htmlFor={option.name}>{option.name}</label>\n                                                    </div>\n                                                ))}\n                                            </div>\n                                        </div>\n                                    </div>\n\n                                </div>\n                            </div> */}\n\n\n                            {selectedBasemapLayer && selectedBasemapLayer.url && (\n                                <TileLayer\n                                    key={selectedBasemapLayer.url}\n                                    attribution={selectedBasemapLayer.attribution}\n                                    url={selectedBasemapLayer.url}\n                                    subdomains={selectedBasemapLayer.subdomains}\n                                />\n                            )}\n\n                            {ColorLegendsDataItem && (\n                                <DynamicLegend ColorLegendsDataItem={ColorLegendsDataItem} selectedYear={selectedYear} setSelectedYear={setSelectedYear}/>\n                            )}\n                            <GeoJSON\n                                key={selectedYear}\n                                // style={{ fillColor: '#265073', weight: 2, color: 'blue', fillOpacity: \"0.5\" }}\n                                style={DistrictStyle}\n                                data={Buildings_Footprint.features}\n                                onEachFeature={DistrictOnEachfeature}\n                            />\n\n\n\n\n                            <FiltererdJsonFeature selectedFeatureName={selectedFeatureName} />\n\n\n\n                            <BaseMap />\n                        </MapContainer>\n                    </div>\n                </div>\n\n                <div className='left_panel_equal'>\n\n\n                    {/* <select className=\"form-select\" aria-label=\"Default select example\">\n                            <option selected>Open this select menu</option>\n                            <option value=\"1\">One</option>\n                            <option value=\"2\">Two</option>\n                            <option value=\"3\">Three</option>\n                        </select> */}\n\n\n                    {selectedData && selectedData.length > 0 ? (\n\n                        < >\n                            {selectedData.map((data, index) => (\n                                <div className='card_container' key={index}>\n                                    <h5>ZONE: {data.ZONE} | CATEGORY: {data.CATEGORY} | TENANT: {data.TENANT} </h5>\n\n                                    <div className='card_heading_container'>\n                                        <div className='card_heading'>\n                                            <h4>Annual Rates</h4>\n                                        </div>\n                                    </div>\n                                    <BarChart selectedData={data} />\n\n                                    <div className='card_heading_container'>\n                                        <div className='card_heading'>\n                                            <h4>Monthly Rates</h4>\n                                        </div>\n                                    </div>\n                                    <LineChart selectedData={data} />\n\n                                    <div className='card_heading_container'>\n                                        <div className='card_heading'>\n                                            <h4>Compare rates over years</h4>\n                                        </div>\n                                    </div>\n                                    <MonthlyBarChart selectedData={data} />\n                                </div>\n                            ))}\n\n                        </>\n                    ) : (\n                        <p>Loading...</p>\n                    )}\n\n\n\n\n\n\n                </div>\n\n            </div>\n        </div>\n    )\n}\n\nexport default HomePage"],"names":["BaseMapsLayers","name","url","subdomains","attribution","mapCenter","setInitialMapZoom","mapZoom","viewportWidth","window","innerWidth","setDragging","dragging","L","BaseMap","mousePosition","setMousePosition","useState","lat","lng","map","useMap","HandleMouseHover","useMapEvents","mousemove","e","latlng","_jsxs","_Fragment","children","_jsx","LayersControl","position","collapsed","layer","index","BaseLayer","checked","TileLayer","className","onClick","handleZoomToCenter","setView","FaHome","ScaleControl","_ref","selectedData","options","chart","height","type","zoom","enabled","stroke","curve","width","series","data","color","xaxis","categories","labels","rotate","tickPlacement","yaxis","title","text","tooltip","shared","intersect","ReactApexChart","selectedMonth","setSelectedMonth","xData","yData","undefined","push","value","onChange","target","style","marginRight","selectedFeatureName","filteredData","Buildings_Footprint","find","feature","properties","assetCode","Pane","GeoJSON","fillColor","weight","fillOpacity","fillDensityColor","ColorLegendsDataItem","density","valueColorsMap","Value","Colors","i","length","setSelectedYear","selectedYear","Title","Unit","reversedColors","reverse","reversedValues","backgroundColor","HomePage","selectedBasemapLayer","setSelectedBasemapLayer","setSelectedFeatureName","setSelectedData","setIsLoading","useLoaderContext","useEffect","filterFeatureData","BuildingData","filter","ASSET_CODE","console","warn","MapContainer","fullscreenControl","center","border","margin","zoomSnap","maxZoom","minZoom","keyboard","doubleClickZoom","DynamicLegend","id","DataItem","item","getDensityFromData","opacity","onEachFeature","on","popupContent","bindTooltip","sticky","openTooltip","FiltererdJsonFeature","ZONE","CATEGORY","TENANT","BarChart","LineChart","MonthlyBarChart"],"sourceRoot":""}