{"version":3,"file":"static/js/659.8afd0a6b.chunk.js","mappings":"mQAEO,MAAMA,EAAiB,CAC1B,CACIC,KAAM,aACNC,IAAK,qDACLC,WAAY,CAAC,MAAO,MAAO,MAAO,OAClCC,YAAa,8BAEjB,CACIH,KAAM,aACNC,IAAK,uDACLC,WAAY,CAAC,MAAO,MAAO,MAAO,OAClCC,YAAa,qHAajB,CACEH,KAAM,kBACNC,IAAK,qDACLC,WAAY,CAAC,IAAK,IAAK,KACvBC,YAAY,4FAwCLC,EAAY,CAAC,OAAW,QAExBC,EAAoBA,KAC7B,IACIC,EADAC,EAAgBC,OAAOC,WAS3B,OAPIF,GAAiB,CAAC,OAClBD,EAAU,CAAC,KACTC,GAAiB,CAAC,OACpBD,EAAU,CAAC,KACTC,GAAiB,CAAC,QACpBD,EAAU,CAAC,KAERA,CAAO,EAGLI,EAAcA,KACvB,IACIC,EADAJ,EAAgBC,OAAOC,WAO3B,OALIF,GAAiB,CAAC,OAClBI,GAAW,GACTJ,GAAiB,CAAC,OACpBI,GAAW,GAERA,CAAQ,EAMMC,EAAAA,aACrBA,EAAAA,OAAS,GAAI,IACbA,EAAAA,OAAS,GAAI,K,aC7FjB,MAsCA,EAtCgBC,KACd,MAAOC,EAAeC,IAAoBC,EAAAA,EAAAA,UAAS,CAAEC,IAAK,EAAGC,IAAK,IAC5DC,GAAMC,EAAAA,EAAAA,MAENC,EAAmBA,MACvBC,EAAAA,EAAAA,IAAa,CACXC,UAAYC,IACVT,EAAiBS,EAAEC,OAAO,IAGvB,MAUT,OACEC,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAC,SAAA,EAIEC,EAAAA,EAAAA,KAACR,EAAgB,KAOjBQ,EAAAA,EAAAA,KAAA,UAAQC,UAAU,WAAWC,QAlBNC,KACzBb,EAAIc,QAAQ7B,EAAWC,IAAoB,EAiBgBuB,UAACC,EAAAA,EAAAA,KAACK,EAAAA,IAAM,OACjEL,EAAAA,EAAAA,KAACM,EAAAA,EAAY,MACZ,E,64nQCtCP,MAgEA,EAhEiBC,IAAqB,IAApB,aAACC,GAAaD,EAE5B,MAUME,EAAU,CACZC,MAAO,CACHC,OAAQ,OACRC,KAAM,MACNC,KAAM,CACFC,SAAS,IAIjBC,OAAQ,CACJC,MAAO,WACPC,MAAO,GAEXC,OAAQ,CACJ,CACI/C,KAAM,cACNyC,KAAM,MACNO,KAtBE,CACVX,EAAyB,WAAGA,EAAyB,WAAGA,EAAyB,WAAGA,EAAyB,WAAGA,EAAyB,YAsBjIY,MAAO,YAIfC,MAAO,CAEHC,WAlCM,CACV,KAAK,KAAK,KAAK,KAAK,MAkChBC,OAAQ,CACNC,OAAQ,GAEVC,cAAe,MAInBC,MAAO,CACHC,MAAO,CACHC,KAAM,gBAGdC,QAAS,CACLC,QAAQ,EACRC,WAAW,IAMnB,OACI/B,EAAAA,EAAAA,KAAA,OAAAD,UACIC,EAAAA,EAAAA,KAACgC,EAAAA,EAAc,CAACvB,QAASA,EAASS,OAAQT,EAAQS,OAAQN,KAAK,SAC7D,ECWd,EAvEkBL,IAAqB,IAApB,aAACC,GAAaD,EAE7B,MAmBME,EAAU,CACZC,MAAO,CACHC,OAAQ,OACRC,KAAM,OACNC,KAAM,CACFC,SAAS,IAGjBC,OAAQ,CACJC,MAAO,WACPC,MAAO,GAEXC,OAAQ,CACJ,CACI/C,KAAM,cACNyC,KAAM,OACNO,KA3BE,CACVX,EAAa,UAAWA,EAAa,UAAWA,EAAa,UAAWA,EAAa,UAAWA,EAAa,UAAWA,EAAa,UACrIA,EAAa,UAAWA,EAAa,UAAWA,EAAa,UAAWA,EAAa,UAAWA,EAAa,UAAWA,EAAa,UACrIA,EAAa,UAAWA,EAAa,UAAWA,EAAa,UAAWA,EAAa,UAAWA,EAAa,UAAWA,EAAa,UACrIA,EAAa,UAAWA,EAAa,UAAWA,EAAa,UAAWA,EAAa,UAAWA,EAAa,UAAWA,EAAa,UACrIA,EAAa,UAAWA,EAAa,UAAWA,EAAa,UAAWA,EAAa,UAAWA,EAAa,UAAWA,EAAa,UACrIA,EAAa,UAAWA,EAAa,UAAWA,EAAa,UAAWA,EAAa,UAAWA,EAAa,UAAWA,EAAa,UACrIA,EAAa,UAAWA,EAAa,UAAWA,EAAa,UAAWA,EAAa,UAAWA,EAAa,UAAWA,EAAa,UACrIA,EAAa,UAAWA,EAAa,WAoB7BY,MAAO,YAIfC,MAAO,CAEHC,WA1CM,CACV,SAAU,SAAU,SAAU,SAAU,SAAU,SAAU,SAAU,SAAU,SAAU,SAAU,SAAU,SAC9G,SAAU,SAAU,SAAU,SAAU,SAAU,SAAU,SAAU,SAAU,SAAU,SAAU,SAAU,SAC9G,SAAU,SAAU,SAAU,SAAU,SAAU,SAAU,SAAU,SAAU,SAAU,SAAU,SAAU,SAC9G,SAAU,SAAU,SAAU,SAAU,SAAU,SAAU,SAAU,UAuClEC,OAAQ,CACNC,OAAQ,GAEVC,cAAe,MAInBC,MAAO,CACHC,MAAO,CACHC,KAAM,gBAGdC,QAAS,CACLC,QAAQ,EACRC,WAAW,IAKnB,OACI/B,EAAAA,EAAAA,KAAA,OAAAD,UACIC,EAAAA,EAAAA,KAACgC,EAAAA,EAAc,CAACvB,QAASA,EAASS,OAAQT,EAAQS,OAAQN,KAAK,UAC7D,ECyBd,EA5FwBL,IAAuB,IAAtB,aAAEC,GAAcD,EACrC,MAAO0B,EAAeC,IAAoB/C,EAAAA,EAAAA,UAAS,OAM7CgD,EAAQ,CAAC,KAAM,KAAM,MAGrBC,EAAQ,CACV5B,EAAa,GAAGyB,SAAuB,EACvCzB,EAAa,GAAGyB,SAAuB,EACvCzB,EAAa,GAAGyB,SAAuB,GAIvCzB,EAAa,GAAGyB,cAA+DI,IAAxC7B,EAAa,GAAGyB,SAA6E,OAAxCzB,EAAa,GAAGyB,UAC5GE,EAAMG,KAAK,MACXF,EAAME,KAAK9B,EAAa,GAAGyB,UAI/B,MAAMxB,EAAU,CACZC,MAAO,CACHC,OAAQ,OACRC,KAAM,MACNC,KAAM,CACFC,SAAS,IAGjBC,OAAQ,CACJC,MAAO,WACPC,MAAO,GAEXC,OAAQ,CACJ,CACI/C,KAAM,GAAG8D,gBACTrB,KAAM,MACNO,KAAMiB,EACNhB,MAAO,YAIfC,MAAO,CAEHC,WAAYa,EACZZ,OAAQ,CACJC,OAAQ,GAEZC,cAAe,MAInBC,MAAO,CACHC,MAAO,CACHC,KAAM,kBAAkBK,YAGhCJ,QAAS,CACLC,QAAQ,EACRC,WAAW,IAMnB,OACIlC,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAC,SAAA,EACIF,EAAAA,EAAAA,MAAA,OAAKI,UAAU,uBAAsBF,SAAA,EACjCC,EAAAA,EAAAA,KAAA,SAAAD,SAAO,kBACPF,EAAAA,EAAAA,MAAA,UAAQ0C,MAAON,EAAeO,SApEZ7C,IAC1BuC,EAAiBvC,EAAE8C,OAAOF,MAAM,EAmEsCG,MAAO,CAAEC,YAAa,QAAS5C,SAAA,EACzFC,EAAAA,EAAAA,KAAA,UAAQuC,MAAM,MAAKxC,SAAC,aACpBC,EAAAA,EAAAA,KAAA,UAAQuC,MAAM,MAAKxC,SAAC,cACpBC,EAAAA,EAAAA,KAAA,UAAQuC,MAAM,MAAKxC,SAAC,WACpBC,EAAAA,EAAAA,KAAA,UAAQuC,MAAM,MAAKxC,SAAC,WACpBC,EAAAA,EAAAA,KAAA,UAAQuC,MAAM,MAAKxC,SAAC,SACpBC,EAAAA,EAAAA,KAAA,UAAQuC,MAAM,MAAKxC,SAAC,UACpBC,EAAAA,EAAAA,KAAA,UAAQuC,MAAM,MAAKxC,SAAC,UACpBC,EAAAA,EAAAA,KAAA,UAAQuC,MAAM,MAAKxC,SAAC,YACpBC,EAAAA,EAAAA,KAAA,UAAQuC,MAAM,MAAKxC,SAAC,eACpBC,EAAAA,EAAAA,KAAA,UAAQuC,MAAM,MAAKxC,SAAC,aACpBC,EAAAA,EAAAA,KAAA,UAAQuC,MAAM,MAAKxC,SAAC,cACpBC,EAAAA,EAAAA,KAAA,UAAQuC,MAAM,MAAKxC,SAAC,oBAI5BC,EAAAA,EAAAA,KAACgC,EAAAA,EAAc,CAACvB,QAASA,EAASS,OAAQT,EAAQS,OAAQN,KAAK,UAChE,E,aCtFX,MA0BA,EA1B6BL,IAA4B,IAA3B,oBAACqC,GAAoBrC,GAEnChB,EAAAA,EAAAA,MACOf,IAInB,IAAIqE,EAAeC,EAAAA,GAA6BC,MAC3CC,GAAYA,EAAQC,WAAWC,YAAcN,IAMlD,OAEI5C,EAAAA,EAAAA,KAACmD,EAAAA,EAAI,CAAChF,KAAK,oBAAmB4B,UAC1BC,EAAAA,EAAAA,KAACoD,EAAAA,EAAO,CAEJV,MAAO,CAAEW,UAAW,OAAQC,OAAQ,EAAGlC,MAAO,SAAUmC,YAAa,OACrEpC,KAAM0B,GAFD,GAAGD,MAIT,EC3BCY,EAAmBA,CAACC,EAAsBC,KACxD,IAAKD,EAAsB,OAAO,KAGlC,QAAgBpB,IAAZqB,GAAqC,OAAZA,EAAkB,CAC7C,MAAMC,EAAiBF,EAAqBG,MAAMtE,KAAI,CAACiD,EAAOsB,KAAK,CAAQtB,QAAOnB,MAAOqC,EAAqBK,OAAOD,OAErH,IAAK,IAAIE,EAAI,EAAGA,EAAIJ,EAAeK,OAAQD,IACzC,GAAIL,EAAUC,EAAeI,GAAGxB,MAC9B,OAAOoB,EAAeI,GAAG3C,MAK7B,OAAOqC,EAAqBK,OAAOL,EAAqBK,OAAOE,OAAS,EAC1E,CACE,MAAO,OACT,ECuCF,EAvDsBzD,IAA8D,IAA7D,qBAAEkD,EAAoB,gBAAEQ,EAAe,aAAEC,GAAc3D,EAC1E,MAAM,MAAE4D,EAAK,KAAEC,EAAI,OAAEN,EAAM,MAAEF,GAAUH,EAEjCY,EAAiB,IAAIP,GAAQQ,UAC7BC,EAAiB,IAAIX,GAAOU,UAQlC,OACIzE,EAAAA,EAAAA,MAAA,OAAKI,UAAU,mBAAkBF,SAAA,CAAC,0DAE9BF,EAAAA,EAAAA,MAAA,UAAQ0C,MAAO2B,EAAc1B,SATR7C,IACzBsE,EAAgBtE,EAAE8C,OAAOF,MAAM,EAQiCG,MAAO,CAAEC,YAAa,QAAS5C,SAAA,EACvFC,EAAAA,EAAAA,KAAA,UAAQuC,MAAM,OAAMxC,SAAC,UACrBC,EAAAA,EAAAA,KAAA,UAAQuC,MAAM,OAAMxC,SAAC,UACrBC,EAAAA,EAAAA,KAAA,UAAQuC,MAAM,OAAMxC,SAAC,UACrBC,EAAAA,EAAAA,KAAA,UAAQuC,MAAM,OAAMxC,SAAC,UACrBC,EAAAA,EAAAA,KAAA,UAAQuC,MAAM,OAAMxC,SAAC,aAKzBF,EAAAA,EAAAA,MAAA,OAAKI,UAAU,yBAAwBF,SAAA,EACvCF,EAAAA,EAAAA,MAAA,OAAKI,UAAU,cAAaF,SAAA,EACxBC,EAAAA,EAAAA,KAAA,QACIC,UAAU,qBACVyC,MAAO,CAAE8B,gBAAiB,YAE9BxE,EAAAA,EAAAA,KAAA,QAAMC,UAAU,eAAcF,SAAC,eAM9BsE,EAAe/E,KAAI,CAAC8B,EAAOyC,KACxBhE,EAAAA,EAAAA,MAAA,OAAiBI,UAAU,cAAaF,SAAA,EACpCC,EAAAA,EAAAA,KAAA,QACIC,UAAU,qBACVyC,MAAO,CAAE8B,gBAAiBpD,MAE9BpB,EAAAA,EAAAA,KAAA,QAAMC,UAAU,eAAcF,SACzB8D,IAAUQ,EAAeL,OAAS,EAAI,KAAKO,EAAeV,KAEvD,GAAGU,EAAeV,aAAYU,EAAeV,EAAQ,SARvDA,UAahB,E,q226RCLd,EA9C2BtD,IAA+B,IAA9B,qBAAEkD,GAAsBlD,EAChD,MAAM,OAAEuD,EAAM,OAAEW,GAAWhB,EAErBY,EAAiB,IAAIP,GAAQQ,UAC7BI,EAAiB,IAAID,GAAQH,UAMnC,OACIzE,EAAAA,EAAAA,MAAA,OAAKI,UAAU,mBAAkBF,SAAA,CAAC,aAK9BF,EAAAA,EAAAA,MAAA,OAAKI,UAAU,yBAAwBF,SAAA,CAIlCsE,EAAe/E,KAAI,CAAC8B,EAAOyC,KACxBhE,EAAAA,EAAAA,MAAA,OAAiBI,UAAU,cAAaF,SAAA,EACpCC,EAAAA,EAAAA,KAAA,QACIC,UAAU,qBACVyC,MAAO,CAAE8B,gBAAiBpD,MAE9BpB,EAAAA,EAAAA,KAAA,QAAMC,UAAU,eAAcF,SACzB2E,EAAeb,OANdA,MAWdhE,EAAAA,EAAAA,MAAA,OAAKI,UAAU,cAAaF,SAAA,EACxBC,EAAAA,EAAAA,KAAA,QACIC,UAAU,qBACVyC,MAAO,CAAE8B,gBAAiB,cAE9BxE,EAAAA,EAAAA,KAAA,QAAMC,UAAU,eAAcF,SAAC,kBAKrC,ECjBR4E,EAAyB,CAC3B,CACIxG,KAAM,4BACNoE,MAAO,mBAEX,CACIpE,KAAM,YACNoE,MAAO,cAMTqC,EAA0B,CAC5B,CACIzG,KAAM,qBACNoE,MAAO,sBAEX,CACIpE,KAAM,sBACNoE,MAAO,uBAEX,CACIpE,KAAM,2BACNoE,MAAO,6BAkcf,EA3biBsC,KACb,MAAOC,EAAsBC,IAA2B5F,EAAAA,EAAAA,UAASjB,EAAe,KACzE0E,EAAqBoC,IAA0B7F,EAAAA,EAAAA,UAAS,SACxDqB,EAAcyE,IAAmB9F,EAAAA,EAAAA,UAAS,OAC1C+E,EAAcD,IAAmB9E,EAAAA,EAAAA,UAAS,SAE1C+F,EAAmBC,IAAwBhG,EAAAA,EAAAA,UAAS,CAACwF,EAAuB,GAAGpC,QAEtF6C,QAAQC,IAAIH,GAMZ,MAAM,aAAEI,IAAiBC,EAAAA,EAAAA,KAEnBC,EAA2BA,CAAC7F,EAAG8F,KACjC,MAAMlD,EAAQ5C,EAAE8C,OAAOF,MAEnBkD,EAEAN,EAAqB,CAAC5C,IAGlB2C,EAAkBQ,SAASnD,GAC3B4C,EAAqBD,EAAkBS,QAAQC,GAASA,IAASrD,KAEjE4C,EAAqB,IAAID,EAAmB3C,GAEpD,EAIEsD,EAA0BlG,IAC5B,MAAMmG,EAAe5H,EAAe6E,MAAM6C,GAASA,EAAKzH,OAASwB,EAAE8C,OAAOF,QAC1EwC,EAAwBe,EAAa,GAezCC,EAAAA,EAAAA,YAAU,KACoBC,MACtB,GAAIpD,EAAqB,CACrB,MAAMC,EAAeoD,EAAaN,QAAQxE,GAASA,EAAK+E,YAAcC,SAASvD,KAC3EC,EACAoC,EAAgBpC,GAEhBuC,QAAQgB,KAAK,6CAA8CxD,EAEnE,GAEJoD,EAAmB,GACpB,CAACpD,IAGJ,MAAMa,EAAuB,CACzBU,MAAO,sCACPC,KAAM,GACNR,MAAO,CAAC,IAAO,IAAO,IAAO,IAAO,IAAO,IAAM,GACjDE,OAAQ,CAAC,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,YAgB/E,SAASuC,EAAsBrD,EAASsD,GAIpCA,EAAMC,GAAG,SAAS,SAAU5G,GAExB,GADAqF,EAAuBhC,EAAQC,WAAsB,WACjDD,EAAQC,YAAcD,EAAQC,WAAsB,UAAG,CACvD,MAAMuD,EAAe,oEAECxD,EAAQC,WAAsB,qDAChCD,EAAQC,WAAqB,yDACxBD,EAAQC,WAAsB,+DAGvDqD,EAAMG,YAAYD,EAAc,CAAEE,QAAQ,GAC9C,CACAJ,EAAMK,aAEV,GACJ,CAyDA,OACI3G,EAAAA,EAAAA,KAAA,OAAKC,UAAU,0BAAyBF,UACpCF,EAAAA,EAAAA,MAAA,OAAKI,UAAU,iBAAgBF,SAAA,EAG3BC,EAAAA,EAAAA,KAAA,OAAKC,UAAU,oBAAmBF,UAC9BC,EAAAA,EAAAA,KAAA,OAAKC,UAAU,iBAAiByC,MAAO,CAAE/B,OAAQ,QAASZ,UAEtDF,EAAAA,EAAAA,MAAC+G,EAAAA,EAAY,CACTC,mBAAmB,EACnBC,OAAQvI,EACRmE,MAAO,CAAEzB,MAAO,OAAQN,OAAQ,OAAQ6D,gBAAiB,QAASuC,OAAQ,OAAQC,OAAQ,QAC1FnG,KAAMrC,IAENyI,SAAU,GACVC,QAAS,GACTC,QAAS3I,IAAsB,EAC/B4I,UAAU,EACVtI,SAAUD,IAIVwI,iBAAiB,EAAMtH,SAAA,EAGvBC,EAAAA,EAAAA,KAAA,OAAKC,UAAU,oBAAmBF,UAC9BF,EAAAA,EAAAA,MAAA,OAAKI,UAAU,YAAYqH,GAAG,iCAAgCvH,SAAA,EAC1DF,EAAAA,EAAAA,MAAA,OAAKI,UAAU,iBAAgBF,SAAA,EAC3BC,EAAAA,EAAAA,KAAA,MAAIC,UAAU,mBAAmBqH,GAAG,4BAA2BvH,UAC3DC,EAAAA,EAAAA,KAAA,UAAQC,UAAU,uCAAuCW,KAAK,SAAS,iBAAe,WAAW,iBAAe,8BAA8B,gBAAc,OAAO,gBAAc,6BAA4Bb,SAAC,gBAIlNC,EAAAA,EAAAA,KAAA,OAAKsH,GAAG,6BAA6BrH,UAAU,mCAAmC,kBAAgB,4BAA2BF,UACzHC,EAAAA,EAAAA,KAAA,OAAKC,UAAU,yCAAwCF,SAClD7B,EAAeoB,KAAI,CAACiI,EAAQ1D,KACzBhE,EAAAA,EAAAA,MAAA,OAAiBI,UAAU,aAAYF,SAAA,EACnCC,EAAAA,EAAAA,KAAA,SACIY,KAAK,QACLX,UAAU,mBACVqH,GAAIC,EAAOpJ,KACXA,KAAK,YACLoE,MAAOgF,EAAOpJ,KACdqJ,SAA6B,OAApB1C,QAAoB,IAApBA,OAAoB,EAApBA,EAAsB3G,QAASoJ,EAAOpJ,KAC/CqE,SAAUqD,KAEd7F,EAAAA,EAAAA,KAAA,SAAOyH,QAASF,EAAOpJ,KAAK4B,SAAEwH,EAAOpJ,SAV/B0F,aAgB1BhE,EAAAA,EAAAA,MAAA,OAAKI,UAAU,iBAAgBF,SAAA,EAC3BC,EAAAA,EAAAA,KAAA,MAAIC,UAAU,mBAAmBqH,GAAG,4BAA2BvH,UAC3DC,EAAAA,EAAAA,KAAA,UAAQC,UAAU,sCAAsCW,KAAK,SAAS,iBAAe,WAAW,iBAAe,8BAA8B,gBAAc,OAAO,gBAAc,6BAA4Bb,SAAC,cAIjNC,EAAAA,EAAAA,KAAA,OAAKsH,GAAG,6BAA6BrH,UAAU,mCAAmC,kBAAgB,4BAA2BF,UACzHF,EAAAA,EAAAA,MAAA,OAAKI,UAAU,yCAAwCF,SAAA,CAElD4E,EAAuBrF,KAAI,CAACsG,EAAM/B,KAC/BhE,EAAAA,EAAAA,MAAA,OAAiBI,UAAU,aAAYF,SAAA,EACnCC,EAAAA,EAAAA,KAAA,SACIC,UAAU,mBACVW,KAAK,QACL0G,GAAI1B,EAAKrD,MACTA,MAAOqD,EAAKrD,MACZiF,QAAStC,EAAkBQ,SAASE,EAAKrD,OACzCC,SAAW7C,GAAM6F,EAAyB7F,GAAG,MAEjDK,EAAAA,EAAAA,KAAA,SAAOyH,QAAS7B,EAAKrD,MAAMxC,SAAE6F,EAAKzH,SAT5B0F,MAYd7D,EAAAA,EAAAA,KAAA,SAEC4E,EAAwBtF,KAAI,CAACsG,EAAM/B,KAChChE,EAAAA,EAAAA,MAAA,OAAiBI,UAAU,aAAYF,SAAA,EACnCC,EAAAA,EAAAA,KAAA,SACIC,UAAU,mBACVW,KAAK,WACL0G,GAAI1B,EAAKrD,MACTA,MAAOqD,EAAKrD,MACZiF,QAAStC,EAAkBQ,SAASE,EAAKrD,OACzCC,SAAW7C,GAAM6F,EAAyB7F,GAAG,MAEjDK,EAAAA,EAAAA,KAAA,SAAOyH,QAAS7B,EAAKrD,MAAMxC,SAAE6F,EAAKzH,SAT5B0F,kBA2BjCiB,GAAwBA,EAAqB1G,MAC1C4B,EAAAA,EAAAA,KAAC0H,EAAAA,EAAS,CAENpJ,YAAawG,EAAqBxG,YAClCF,IAAK0G,EAAqB1G,IAC1BC,WAAYyG,EAAqBzG,YAH5ByG,EAAqB1G,KAQjC8G,EAAkBQ,SAAS,oBAAsBjC,IAC9C5D,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAC,SAAA,EACIC,EAAAA,EAAAA,KAAC2H,EAAa,CAAClE,qBAAsBA,EAAsBS,aAAcA,EAAcD,gBAAiBA,KAExGjE,EAAAA,EAAAA,KAACoD,EAAAA,EAAO,CAGJV,MArJbM,IAEnB,MAKMU,EALsB4D,KACxB,MAAMM,EAAW3B,GAAgBA,EAAalD,MAAM6C,GAASA,EAAKM,YAAcC,SAASmB,KACzF,OAAOM,GAAYA,EAAS,SAAS1D,IAAe,EAGxC2D,CAAmB7E,EAAQC,WAAWC,WAGtD,MAAO,CACHG,UAAWG,EAAiBC,EAAsBC,GAElDJ,OAAQ,EACRwE,QAAS,EACT1G,MAAO,QAEPmC,YAAa,EAChB,EAoI+BpC,KAAM2B,EAAAA,GACNiF,cAAe1B,GAJVnC,MAUhBgB,EAAkBQ,SAAS,eACxB7F,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAC,SAAA,EACIC,EAAAA,EAAAA,KAACgI,EAAkB,CAACvE,qBA3NrB,CAC3BU,MAAO,sCACPC,KAAM,GACNK,OAAQ,CAAC,8BAA+B,2BAA4B,wBAAyB,aAAc,MAAO,eAClHX,OAAQ,CAAC,UAAW,UAAW,UAAW,UAAW,UAAW,eAwNpC9D,EAAAA,EAAAA,KAACoD,EAAAA,EAAO,CAGJV,MA9LbM,IAcZ,CACHK,UAbiB,CACjB,8BAA+B,UAC/B,2BAA4B,UAC5B,wBAAyB,UACzB,WAAc,UACd,MAAO,UACP,cAAe,WAIQL,EAAQC,WAAsB,YAAM,UAI3DK,OAAQ,EACRlC,MAAO,QACP0G,QAAS,EACTvE,YAAa,IA4KepC,KAAM2B,EAAAA,GACNiF,cAAe1B,GAJVnC,MAUhBgB,EAAkBQ,SAAS,wBACxB1F,EAAAA,EAAAA,KAAAF,EAAAA,SAAA,CAAAC,UAEIC,EAAAA,EAAAA,KAACoD,EAAAA,EAAO,CACJjC,KAAM8G,EAAAA,EACNvF,MAAO,CACHW,UAAW,OACXC,OAAQ,EACRlC,MAAO,OACP8G,aAAa,OAoB5BhD,EAAkBQ,SAAS,yBACxB1F,EAAAA,EAAAA,KAAAF,EAAAA,SAAA,CAAAC,UACIC,EAAAA,EAAAA,KAACoD,EAAAA,EAAO,CAACjC,KAAMgH,EAAAA,EAA8BzF,MAAO,CAChDW,UAAW,OACXC,OAAQ,EACRlC,MAAO,SACP8G,aAAa,OAMxBhD,EAAkBQ,SAAS,8BACxB1F,EAAAA,EAAAA,KAAAF,EAAAA,SAAA,CAAAC,SACKqI,GAA4BA,EAAAA,SAAkC9I,KAAI,CAACsG,EAAM/B,KACtE7D,EAAAA,EAAAA,KAACqI,EAAAA,EAAM,CAEHvB,OAAQ,CACJlB,EAAK0C,SAASC,YAAY,GAC1B3C,EAAK0C,SAASC,YAAY,IAE9BC,OAAQ,EACRpH,MAAM,QACNiC,UAAU,OACVE,YAAa,IARRM,QAqBrB7D,EAAAA,EAAAA,KAACyI,EAAoB,CAAC7F,oBAAqBA,KAI3C5C,EAAAA,EAAAA,KAAChB,EAAO,YAKpBgB,EAAAA,EAAAA,KAAA,OAAKC,UAAU,mBAAkBF,SAW5BS,GAAgBA,EAAawD,OAAS,GAEnChE,EAAAA,EAAAA,KAAAF,EAAAA,SAAA,CAAAC,SACKS,EAAalB,KAAI,CAAC6B,EAAM0C,KACrBhE,EAAAA,EAAAA,MAAA,OAAKI,UAAU,iBAAgBF,SAAA,EAC3BC,EAAAA,EAAAA,KAAA,OAAKC,UAAU,yBAAwBF,UACnCC,EAAAA,EAAAA,KAAA,OAAKC,UAAU,eAAcF,UACzBF,EAAAA,EAAAA,MAAA,MAAAE,SAAA,CAAI,cAAYoB,EAAK+E,UAAU,YAAU/E,EAAKuH,KAAK,aAM3D1I,EAAAA,EAAAA,KAAA,OAAKC,UAAU,0BAAyBF,UACpCC,EAAAA,EAAAA,KAAA,OAAKC,UAAU,gBAAeF,UAC1BC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,sBAGZC,EAAAA,EAAAA,KAAC2I,EAAQ,CAACnI,aAAcW,KAExBnB,EAAAA,EAAAA,KAAA,OAAKC,UAAU,0BAAyBF,UACpCC,EAAAA,EAAAA,KAAA,OAAKC,UAAU,gBAAeF,UAC1BC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,uBAGZC,EAAAA,EAAAA,KAAC4I,EAAS,CAACpI,aAAcW,KAEzBnB,EAAAA,EAAAA,KAAA,OAAKC,UAAU,0BAAyBF,UACpCC,EAAAA,EAAAA,KAAA,OAAKC,UAAU,gBAAeF,UAC1BC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,kCAGZC,EAAAA,EAAAA,KAAC6I,EAAe,CAACrI,aAAcW,MA5BE0C,QAkC7C7D,EAAAA,EAAAA,KAAA,KAAAD,SAAG,qBAWb,C","sources":["helpers/mapFunction.js","components/BaseMap.js","components/charts/BarChart.js","components/charts/LineChart.js","components/charts/MonthlyBarChart.js","components/FiltererdJsonFeature.js","helpers/functions.js","components/legend/DynamicLegend.js","components/legend/BuildingTypeLegend.js","pages/HomePage.js"],"sourcesContent":["import * as L from \"leaflet\";\n\nexport const BaseMapsLayers = [\n    {\n        name: \"Google Map\",\n        url: 'https://{s}.google.com/vt/lyrs=m&x={x}&y={y}&z={z}',\n        subdomains: ['mt0', 'mt1', 'mt2', 'mt3'],\n        attribution: \"Basemap: &copy;2024 Google\"\n    },\n    {\n        name: \"Hybrid Map\",\n        url: 'https://{s}.google.com/vt/lyrs=s,h&x={x}&y={y}&z={z}',\n        subdomains: ['mt0', 'mt1', 'mt2', 'mt3'],\n        attribution: \"Basemap: &copy;2024 NASA, TerraMetrics <a href='https://www.google.com/intl/en-US_US/help/terms_maps/'> Terms</a>\"\n    },\n\n\n    // {\n    //     name: \"Street Map\",\n    //     url: 'https://server.arcgisonline.com/ArcGIS/rest/services/World_Street_Map/MapServer/tile/{z}/{y}/{x}',\n    //     subdomains: ['a', 'b', 'c'],\n    //     attribution: 'Basemap: Esri, TomTom, FAO, NOAA, USGS'\n    // },\n\n\n\n    {\n      name: \"Open Street Map\",\n      url: 'https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png',\n      subdomains: ['a', 'b', 'c'],\n      attribution:'&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\n    },\n    // {\n    //     name: \"Topographic Map\",\n    //     url: 'https://{s}.tile.opentopomap.org/{z}/{x}/{y}.png',\n    //     subdomains: ['a', 'b', 'c'],\n    //     attribution: 'Basemap:: &copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors, <a href=\"http://viewfinderpanoramas.org\">SRTM</a> </a>'\n    // },\n    // {\n    //     name: \"Satellite Map\",\n    //     url: 'https://{s}.google.com/vt/lyrs=s&x={x}&y={y}&z={z}',\n    //     subdomains: ['mt0', 'mt1', 'mt2', 'mt3'],\n    //     attribution: \"Basemap: &copy;2024 Google\"\n    // },\n    // {\n    //     name: \"Physical Map\",\n    //     url: 'https://server.arcgisonline.com/ArcGIS/rest/services/World_Physical_Map/MapServer/tile/{z}/{y}/{x}',\n    //     subdomains: ['a', 'b', 'c'],\n    //     attribution: \"Basemap: &copy; Esri &mdash; Source: US National Park Service\"\n    // },\n\n    // {\n    //     name: \"Terrain Map\",\n    //     url: 'https://{s}.google.com/vt/lyrs=p&x={x}&y={y}&z={z}',\n    //     subdomains: ['mt0', 'mt1', 'mt2', 'mt3'],\n    //     attribution: \"&copy;2024 Google\"\n    // },\n    // {\n    //     name: \"Google Roads Map\",\n    //     url: 'https://{s}.google.com/vt/lyrs=h&x={x}&y={y}&z={z}',\n    //     subdomains: ['mt0', 'mt1', 'mt2', 'mt3'],\n    //     attribution: \"&copy;2024 Google\"\n    // },\n\n]\n\n\n\n\n// export const mapCenter = [24.961018, 55.150827]\nexport const mapCenter = [24.961000, 55.15200]\n\nexport const setInitialMapZoom = () => {\n    var viewportWidth = window.innerWidth;\n    var mapZoom;\n    if (viewportWidth <= [767]) {\n        mapZoom = [16];\n    } if (viewportWidth >= [768]) {\n        mapZoom = [16];\n    } if (viewportWidth >= [1600]) {\n        mapZoom = [16];\n    }\n    return mapZoom;\n}\n\nexport const setDragging = () => {\n    var viewportWidth = window.innerWidth;\n    var dragging;\n    if (viewportWidth <= [767]) {\n        dragging = false;\n    } if (viewportWidth >= [768]) {\n        dragging = true;\n    }\n    return dragging;\n}\n\n\n\n\nexport const maxBounds = L.latLngBounds(\n    L.latLng(23, 49),  \n    L.latLng(43, 82)  \n);\n\n","import React, { useState } from 'react'\nimport { TileLayer, GeoJSON, LayersControl, FeatureGroup, ScaleControl, useMap, useMapEvents, Circle } from 'react-leaflet'\n// import L from 'leaflet';\nimport { FaHome } from \"react-icons/fa\";\nimport { BaseMapsLayers, mapCenter, setInitialMapZoom } from '../helpers/mapFunction';\n\n\n\nconst BaseMap = () => {\n  const [mousePosition, setMousePosition] = useState({ lat: 0, lng: 0 });\n  const map = useMap();\n\n  const HandleMouseHover = () => {\n    useMapEvents({\n      mousemove: (e) => {\n        setMousePosition(e.latlng);\n      },\n    });\n    return null;\n  };\n\n\n  const handleZoomToCenter = () => {\n    map.setView(mapCenter, setInitialMapZoom());\n  };\n\n\n\n  return (\n    <>\n      \n\n\n      <HandleMouseHover />\n      {/* \n      <div\n        className='coordinates_container' >\n        Lat: {mousePosition.lat.toFixed(4)}, Long:{\" \"}\n        {mousePosition.lng.toFixed(4)}\n      </div> */}\n      <button className='zoom_btn' onClick={handleZoomToCenter}><FaHome /></button>\n      <ScaleControl />\n    </>\n  )\n}\n\nexport default BaseMap","import React from 'react';\nimport ReactApexChart from 'react-apexcharts';\n\n\nconst BarChart = ({selectedData}) => {\n\n    const xData = [\n        2019,2020,2021,2022,2023\n    ];\n\n    // Get corresponding values for each month\n    const yData = [\n        selectedData[\"TOTAL_2019\"], selectedData[\"TOTAL_2020\"], selectedData[\"TOTAL_2021\"], selectedData[\"TOTAL_2022\"], selectedData[\"TOTAL_2023\"], \n    ];\n\n\n    const options = {\n        chart: {\n            height: '100%',\n            type: 'bar',\n            zoom: {\n                enabled: false, // Disable zoom on scroll\n              },\n        },\n\n        stroke: {\n            curve: 'straight',\n            width: 2\n          },\n        series: [\n            {\n                name: 'Rates (AED)',\n                type: 'bar',\n                data: yData,\n                color: '#011a52',\n                \n            },\n        ],\n        xaxis: {\n            \n            categories: xData,\n            labels: {\n              rotate: 0,\n            },\n            tickPlacement: 'on',\n          },\n\n\n        yaxis: {\n            title: {\n                text: 'Rates (AED)'\n            }\n        },\n        tooltip: {\n            shared: true,\n            intersect: false,\n\n        },\n\n    };\n\n    return (\n        <div>\n            <ReactApexChart options={options} series={options.series} type=\"bar\" />\n        </div>\n    );\n}\n\nexport default BarChart;\n","import React from 'react';\nimport ReactApexChart from 'react-apexcharts';\n\n\nconst LineChart = ({selectedData}) => {\n\n    const xData = [\n        \"Jan-21\", \"Feb-21\", \"Mar-21\", \"Apr-21\", \"May-21\", \"Jun-21\", \"Jul-21\", \"Aug-21\", \"Sep-21\", \"Oct-21\", \"Nov-21\", \"Dec-21\",\n        \"Jan-22\", \"Feb-22\", \"Mar-22\", \"Apr-22\", \"May-22\", \"Jun-22\", \"Jul-22\", \"Aug-22\", \"Sep-22\", \"Oct-22\", \"Nov-22\", \"Dec-22\",\n        \"Jan-23\", \"Feb-23\", \"Mar-23\", \"Apr-23\", \"May-23\", \"Jun-23\", \"Jul-23\", \"Aug-23\", \"Sep-23\", \"Oct-23\", \"Nov-23\", \"Dec-23\",\n        \"Jan-24\", \"Feb-24\", \"Mar-24\", \"Apr-24\", \"May-24\", \"Jun-24\", \"Jul-24\", \"Aug-24\"\n    ];\n\n    // Get corresponding values for each month\n    const yData = [\n        selectedData[\"Jan-21\"], selectedData[\"Feb-21\"], selectedData[\"Mar-21\"], selectedData[\"Apr-21\"], selectedData[\"May-21\"], selectedData[\"Jun-21\"],\n        selectedData[\"Jul-21\"], selectedData[\"Aug-21\"], selectedData[\"Sep-21\"], selectedData[\"Oct-21\"], selectedData[\"Nov-21\"], selectedData[\"Dec-21\"],\n        selectedData[\"Jan-22\"], selectedData[\"Feb-22\"], selectedData[\"Mar-22\"], selectedData[\"Apr-22\"], selectedData[\"May-22\"], selectedData[\"Jun-22\"],\n        selectedData[\"Jul-22\"], selectedData[\"Aug-22\"], selectedData[\"Sep-22\"], selectedData[\"Oct-22\"], selectedData[\"Nov-22\"], selectedData[\"Dec-22\"],\n        selectedData[\"Jan-23\"], selectedData[\"Feb-23\"], selectedData[\"Mar-23\"], selectedData[\"Apr-23\"], selectedData[\"May-23\"], selectedData[\"Jun-23\"],\n        selectedData[\"Jul-23\"], selectedData[\"Aug-23\"], selectedData[\"Sep-23\"], selectedData[\"Oct-23\"], selectedData[\"Nov-23\"], selectedData[\"Dec-23\"],\n        selectedData[\"Jan-24\"], selectedData[\"Feb-24\"], selectedData[\"Mar-24\"], selectedData[\"Apr-24\"], selectedData[\"May-24\"], selectedData[\"Jun-24\"],\n        selectedData[\"Jul-24\"], selectedData[\"Aug-24\"]\n    ];\n\n    const options = {\n        chart: {\n            height: '100%',\n            type: 'line',\n            zoom: {\n                enabled: false, // Disable zoom on scroll\n              },\n        },\n        stroke: {\n            curve: 'straight',\n            width: 2\n          },\n        series: [\n            {\n                name: 'Rates (AED)',\n                type: 'line',\n                data: yData,\n                color: '#02ab6d',\n                \n            },\n        ],\n        xaxis: {\n            \n            categories: xData,\n            labels: {\n              rotate: 0,\n            },\n            tickPlacement: 'on',\n          },\n\n\n        yaxis: {\n            title: {\n                text: 'Rates (AED)'\n            }\n        },\n        tooltip: {\n            shared: true,\n            intersect: false,\n        },\n\n    };\n\n    return (\n        <div>\n            <ReactApexChart options={options} series={options.series} type=\"line\" />\n        </div>\n    );\n}\n\nexport default LineChart;\n","import React, { useState } from 'react';\nimport ReactApexChart from 'react-apexcharts';\n\n\nconst MonthlyBarChart = ({ selectedData }) => {\n    const [selectedMonth, setSelectedMonth] = useState('Jan');\n\n    const handleMonthSelection = (e) => {\n        setSelectedMonth(e.target.value)\n    }\n\n    const xData = [2021, 2022, 2023];\n\n    // Define the y-axis data for each year\n    const yData = [\n        selectedData[`${selectedMonth}-21`] || 0, // Handle missing data with a default value of 0\n        selectedData[`${selectedMonth}-22`] || 0,\n        selectedData[`${selectedMonth}-23`] || 0,\n    ];\n\n    // Check if data for 2024 exists, and only add it if it exists\n    if (selectedData[`${selectedMonth}-24`] && selectedData[`${selectedMonth}-24`] !== undefined && selectedData[`${selectedMonth}-24`] !== null) {\n        xData.push(2024);\n        yData.push(selectedData[`${selectedMonth}-24`]);\n    }\n\n\n    const options = {\n        chart: {\n            height: '100%',\n            type: 'bar',\n            zoom: {\n                enabled: false, // Disable zoom on scroll\n              },\n        },\n        stroke: {\n            curve: 'straight',\n            width: 2\n        },\n        series: [\n            {\n                name: `${selectedMonth} rates (AED)`,\n                type: 'bar',\n                data: yData,\n                color: '#ba7c00',\n\n            },\n        ],\n        xaxis: {\n\n            categories: xData,\n            labels: {\n                rotate: 0,\n            },\n            tickPlacement: 'on',\n        },\n\n\n        yaxis: {\n            title: {\n                text: `Rates (AED) in ${selectedMonth} month`,\n            }\n        },\n        tooltip: {\n            shared: true,\n            intersect: false,\n\n        },\n\n    };\n\n    return (\n        <>\n            <div className='chart_year_container' >\n                <label>Month: &nbsp; </label>\n                <select value={selectedMonth} onChange={handleMonthSelection} style={{ marginRight: \"10px\" }}>\n                    <option value=\"Jan\">January</option>\n                    <option value=\"Feb\">February</option>\n                    <option value=\"Mar\">March</option>\n                    <option value=\"Apr\">April</option>\n                    <option value=\"May\">May</option>\n                    <option value=\"Jun\">June</option>\n                    <option value=\"Jul\">July</option>\n                    <option value=\"Aug\">August</option>\n                    <option value=\"Sep\">September</option>\n                    <option value=\"Oct\">October</option>\n                    <option value=\"Nov\">November</option>\n                    <option value=\"Dec\">December</option>\n                </select>\n\n            </div>\n            <ReactApexChart options={options} series={options.series} type=\"bar\" />\n        </>\n    );\n}\n\nexport default MonthlyBarChart;\n","import React, { useEffect } from 'react';\nimport { GeoJSON, Pane, useMap } from 'react-leaflet';\nimport * as L from 'leaflet';\nimport { mapCenter, setDragging, setInitialMapZoom } from '../helpers/mapFunction';\nimport Buildings_Footprint from \"../assets/data/Buildings_Footprint.json\"\n\nconst FiltererdJsonFeature = ({selectedFeatureName}) => {\n\n    const map = useMap();\n    const intialZoom = setInitialMapZoom()\n\n\n\n    let filteredData = Buildings_Footprint.features.find(\n        (feature) => feature.properties.primaryID === selectedFeatureName\n    );\n\n\n\n\n    return (\n        // <Pane name=\"selected_features\" style={{ zIndex: 1000 }}>\n        <Pane name=\"selected_features\">\n            <GeoJSON\n                key={`${selectedFeatureName}`}\n                style={{ fillColor: 'none', weight: 4, color: 'yellow', fillOpacity: \"0.4\" }}\n                data={filteredData}\n            />\n        </Pane>\n    );\n};\n\nexport default FiltererdJsonFeature;\n","\nexport    const fillDensityColor = (ColorLegendsDataItem, density) => {\n  if (!ColorLegendsDataItem) return null;\n\n  // Check for density explicitly considering 0 as a valid value\n  if (density !== undefined && density !== null) {\n    const valueColorsMap = ColorLegendsDataItem.Value.map((value, index) => ({ value, color: ColorLegendsDataItem.Colors[index] }));\n\n    for (let i = 0; i < valueColorsMap.length; i++) {\n      if (density > valueColorsMap[i].value) {\n        return valueColorsMap[i].color;\n      }\n    }\n\n    // Default to the last color if no match found\n    return ColorLegendsDataItem.Colors[ColorLegendsDataItem.Colors.length - 1];\n  } else {\n    return \"white\";\n  }\n};\n","import React from 'react';\n\nconst DynamicLegend = ({ ColorLegendsDataItem, setSelectedYear, selectedYear }) => {\n    const { Title, Unit, Colors, Value } = ColorLegendsDataItem;\n\n    const reversedColors = [...Colors].reverse();\n    const reversedValues = [...Value].reverse();\n\n    const handleYearSelection = (e) => {\n        setSelectedYear(e.target.value)\n    }\n\n\n\n    return (\n        <div className=\"legend_container\">\n            Annual variation of utility charges (AED) in year &nbsp;\n            <select value={selectedYear} onChange={handleYearSelection} style={{ marginRight: \"10px\" }}>\n                <option value=\"2019\">2019</option>\n                <option value=\"2020\">2020</option>\n                <option value=\"2021\">2021</option>\n                <option value=\"2022\">2022</option>\n                <option value=\"2023\">2023</option>\n\n            </select>\n\n\n            <div className=\"legend-color-container\">\n            <div className=\"legend_item\">\n                <span\n                    className=\"legend_item_square\"\n                    style={{ backgroundColor: \"white\" }}\n                />\n                <span className=\"legend-label\">\n                    No Data\n                </span>\n                </div>\n\n\n                {reversedColors.map((color, index) => (\n                    <div key={index} className=\"legend_item\">\n                        <span\n                            className=\"legend_item_square\"\n                            style={{ backgroundColor: color }}\n                        />\n                        <span className=\"legend-label\">\n                            {index === reversedColors.length - 1 ? `> ${reversedValues[index]}` :\n                                // index === 0 ? `< ${reversedValues[index]}` :\n                                `${reversedValues[index]} — ${reversedValues[index + 1]}`}\n                        </span>\n                    </div>\n                ))}\n            </div>\n        </div>\n    );\n};\n\nexport default DynamicLegend;\n","import React from 'react';\n\nconst BuildingTypeLegend = ({ ColorLegendsDataItem }) => {\n    const { Colors, Labels } = ColorLegendsDataItem;\n\n    const reversedColors = [...Colors].reverse();\n    const reversedLabels = [...Labels].reverse();\n\n\n\n\n\n    return (\n        <div className=\"legend_container\">\n            Buildings\n\n\n\n            <div className=\"legend-color-container\">\n\n\n\n                {reversedColors.map((color, index) => (\n                    <div key={index} className=\"legend_item\">\n                        <span\n                            className=\"legend_item_square\"\n                            style={{ backgroundColor: color }}\n                        />\n                        <span className=\"legend-label\">\n                            {reversedLabels[index]}\n                        </span>\n                    </div>\n                ))}\n\n                <div className=\"legend_item\">\n                    <span\n                        className=\"legend_item_square\"\n                        style={{ backgroundColor: \"#cccccc\" }}\n                    />\n                    <span className=\"legend-label\">\n                        Other\n                    </span>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default BuildingTypeLegend;\n","import React, { useEffect, useState } from 'react'\nimport { MapContainer, GeoJSON, TileLayer, LayersControl, FeatureGroup, Circle, } from 'react-leaflet'\nimport * as L from \"leaflet\";\nimport \"leaflet/dist/leaflet.css\"\nimport 'leaflet-fullscreen/dist/Leaflet.fullscreen.js';\nimport 'leaflet-fullscreen/dist/leaflet.fullscreen.css';\nimport BaseMap from '../components/BaseMap';\nimport { BaseMapsLayers, mapCenter, maxBounds, setDragging, setInitialMapZoom } from '../helpers/mapFunction';\nimport Buildings_Footprint from \"../assets/data/Buildings_Footprint.json\"\nimport BuildingData from \"../assets/data/BuildingData.json\"\n// import FiltererdJsonFeature from '../components/FiltererdJsonFeature.js';\n// import SelectedFeatureHeading from '../components/SelectedFeatureHeading.js';\nimport { useLoaderContext } from '../contexts/LoaderContext.js';\nimport BarChart from '../components/charts/BarChart.js';\nimport LineChart from '../components/charts/LineChart.js';\nimport MonthlyBarChart from '../components/charts/MonthlyBarChart.js';\nimport FiltererdJsonFeature from '../components/FiltererdJsonFeature.js';\nimport { fillDensityColor } from '../helpers/functions.js';\nimport DynamicLegend from '../components/legend/DynamicLegend.js';\nimport water_pressure_pipe from \"../assets/data/water_pressure_pipe.json\"\nimport water_pressure_structure from \"../assets/data/water_pressure_structure.json\"\nimport water_gravity_pipe from \"../assets/data/water_gravity_pipe.json\"\nimport BuildingTypeLegend from '../components/legend/BuildingTypeLegend.js';\n\n\n\n\nconst SingleSelectionsLayers = [\n    {\n        name: \"Utility Charges variation\",\n        value: \"utility_charges\",\n    },\n    {\n        name: \"Buildings\",\n        value: \"buildings\",\n    },\n\n\n]\n\nconst MultipleSelectionLayers = [\n    {\n        name: \"Water Gravity Pipe\",\n        value: \"water_gravity_pipe\",\n    },\n    {\n        name: \"Water Pressure Pipe\",\n        value: \"water_pressure_pipe\",\n    },\n    {\n        name: \"Water Pressure Structure\",\n        value: \"water_pressure_structure\",\n    },\n\n]\n\n\n\nconst HomePage = () => {\n    const [selectedBasemapLayer, setSelectedBasemapLayer] = useState(BaseMapsLayers[0]);\n    const [selectedFeatureName, setSelectedFeatureName] = useState(\"5201\");\n    const [selectedData, setSelectedData] = useState(null);\n    const [selectedYear, setSelectedYear] = useState('2023');\n\n    const [selectedDataTypes, setSelectedDataTypes] = useState([SingleSelectionsLayers[0].value]);\n\n    console.log(selectedDataTypes)\n\n\n\n\n\n    const { setIsLoading } = useLoaderContext();\n\n    const handleDataLayerSelection = (e, isSingleSelection) => {\n        const value = e.target.value;\n\n        if (isSingleSelection) {\n            // Only allow one selection for single-selection layers\n            setSelectedDataTypes([value]);\n        } else {\n            // Allow multiple selections for multi-selection layers\n            if (selectedDataTypes.includes(value)) {\n                setSelectedDataTypes(selectedDataTypes.filter((item) => item !== value));\n            } else {\n                setSelectedDataTypes([...selectedDataTypes, value]);\n            }\n        }\n    };\n\n\n    const handleBasemapSelection = (e) => {\n        const selectedItem = BaseMapsLayers.find((item) => item.name === e.target.value);\n        setSelectedBasemapLayer(selectedItem);\n    };\n\n    // const filterFeatureData = () => {\n    //     if (selectedFeatureName) {\n    //         const filteredData = BuildingData.find((data) => data.PrimaryID === parseInt(selectedFeatureName));\n    //         if (filteredData) {\n    //             setSelectedData(filteredData);\n    //         } else {\n    //             console.warn('No data found for the selected asset code:', selectedFeatureName);\n    //         }\n    //     }\n    // }\n\n\n    useEffect(() => {\n        const filterFeatureData = () => {\n            if (selectedFeatureName) {\n                const filteredData = BuildingData.filter((data) => data.PrimaryID === parseInt(selectedFeatureName));\n                if (filteredData) {\n                    setSelectedData(filteredData);\n                } else {\n                    console.warn('No data found for the selected asset code:', selectedFeatureName);\n                }\n            }\n        };\n        filterFeatureData();\n    }, [selectedFeatureName]);\n\n\n    const ColorLegendsDataItem = {\n        Title: \"Annual variation of utility charges\",\n        Unit: \"\",\n        Value: [80000, 60000, 40000, 20000, 10000, 5000, 0],\n        Colors: [\"#ca001b\", \"#ff7c3d\", \"#ffc469\", \"#fffbb1\", \"#c8ecf4\", \"#5ba8d2\", \"#345ead\"],\n\n    }\n\n    const BuiuldingNameColorItem = {\n        Title: \"Annual variation of utility charges\",\n        Unit: \"\",\n        Labels: [\"Chiller Sustainability Dist\", \"Chiller Opportunity Dist\", \"Chiller Mobility Dist\", \"Signatures\", \"F&B\", \"Common Area\"],\n        Colors: [\"#1f78b4\", \"#33a02c\", \"#e31a1c\", \"#ff7f00\", \"#6a3d9a\", \"#b15928\",],\n\n    }\n\n\n\n\n\n    function DistrictOnEachfeature(feature, layer) {\n        // Determine the property name to use based on selectedView\n\n        // Click event handler\n        layer.on('click', function (e) {\n            setSelectedFeatureName(feature.properties[\"primaryID\"]);\n            if (feature.properties && feature.properties[\"primaryID\"]) {\n                const popupContent = `\n                    <div>\n                        Primary ID: ${feature.properties[\"primaryID\"]}<br/>\n                        District: ${feature.properties[\"district\"]}<br/>\n                        Building Name: ${feature.properties[\"blgNameEn\"]}<br/>\n                    </div>\n                `;\n                layer.bindTooltip(popupContent, { sticky: true });\n            }\n            layer.openTooltip();\n\n        });\n    }\n\n    const BuildingStyle = (feature) => {\n        // Define a color mapping for each `blgNameEn`\n        const colorMapping = {\n            \"Chiller Sustainability Dist\": \"#1f78b4\",\n            \"Chiller Opportunity Dist\": \"#33a02c\",\n            \"Chiller Mobility Dist\": \"#e31a1c\",\n            \"Signatures\": \"#ff7f00\",\n            \"F&B\": \"#6a3d9a\",\n            \"Common Area\": \"#b15928\"\n        };\n\n        // Get the color based on `blgNameEn`\n        const color = colorMapping[feature.properties['blgNameEn']] || \"#cccccc\"; // Default color if not matched\n\n        return {\n            fillColor: color,\n            weight: 2,\n            color: \"black\", // Border color\n            opacity: 1,\n            fillOpacity: 1,\n        };\n    };\n\n\n\n\n\n    const DistrictStyle = (feature) => {\n\n        const getDensityFromData = (id) => {\n            const DataItem = BuildingData && BuildingData.find((item) => item.PrimaryID === parseInt(id));\n            return DataItem && DataItem[`TOTAL_${selectedYear}`];\n        };\n\n        const density = getDensityFromData(feature.properties.primaryID);\n\n\n        return {\n            fillColor: fillDensityColor(ColorLegendsDataItem, density),\n            // fillColor: selectedTime !== '' ? Annual_Density(density) : \"none\",\n            weight: 1,\n            opacity: 1,\n            color: \"black\",\n            // dashArray: \"2\",\n            fillOpacity: 1,\n        };\n\n    };\n\n\n\n\n\n\n\n    return (\n        <div className='dasboard_page_container'>\n            <div className='main_dashboard'>\n\n\n                <div className='right_panel_equal' >\n                    <div className='card_container' style={{ height: \"100%\" }}>\n\n                        <MapContainer\n                            fullscreenControl={true}\n                            center={mapCenter}\n                            style={{ width: '100%', height: \"100%\", backgroundColor: 'white', border: 'none', margin: 'auto' }}\n                            zoom={setInitialMapZoom()}\n                            // maxBounds={maxBounds}\n                            zoomSnap={0.5}\n                            maxZoom={20}\n                            minZoom={setInitialMapZoom() - 1}\n                            keyboard={false}\n                            dragging={setDragging()}\n                            // attributionControl={false}\n                            // scrollWheelZoom={false}\n\n                            doubleClickZoom={false}\n                        >\n\n                            <div className='map_layer_manager'>\n                                <div className=\"accordion\" id=\"accordionPanelsStayOpenExample\">\n                                    <div className=\"accordion-item\">\n                                        <h2 className=\"accordion-header\" id=\"panelsStayOpen-headingOne\">\n                                            <button className=\"accordion-button map_layer_collapse \" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#panelsStayOpen-collapseOne\" aria-expanded=\"true\" aria-controls=\"panelsStayOpen-collapseOne\">\n                                                Base Map\n                                            </button>\n                                        </h2>\n                                        <div id=\"panelsStayOpen-collapseOne\" className=\"accordion-collapse collapse show\" aria-labelledby=\"panelsStayOpen-headingOne\">\n                                            <div className=\"accordion-body map_layer_collapse_body\">\n                                                {BaseMapsLayers.map((option, index) => (\n                                                    <div key={index} className=\"form-check\">\n                                                        <input\n                                                            type=\"radio\"\n                                                            className=\"form-check-input\"\n                                                            id={option.name}\n                                                            name=\"data_type\"\n                                                            value={option.name}\n                                                            checked={selectedBasemapLayer?.name === option.name}\n                                                            onChange={handleBasemapSelection}\n                                                        />\n                                                        <label htmlFor={option.name}>{option.name}</label>\n                                                    </div>\n                                                ))}\n                                            </div>\n                                        </div>\n                                    </div>\n                                    <div className=\"accordion-item\">\n                                        <h2 className=\"accordion-header\" id=\"panelsStayOpen-headingTwo\">\n                                            <button className=\"accordion-button map_layer_collapse\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#panelsStayOpen-collapseTwo\" aria-expanded=\"true\" aria-controls=\"panelsStayOpen-collapseTwo\">\n                                                Layers\n                                            </button>\n                                        </h2>\n                                        <div id=\"panelsStayOpen-collapseTwo\" className=\"accordion-collapse collapse show\" aria-labelledby=\"panelsStayOpen-headingTwo\">\n                                            <div className=\"accordion-body map_layer_collapse_body\">\n\n                                                {SingleSelectionsLayers.map((item, index) => (\n                                                    <div key={index} className=\"form-check\">\n                                                        <input\n                                                            className=\"form-check-input\"\n                                                            type=\"radio\"\n                                                            id={item.value}\n                                                            value={item.value}\n                                                            checked={selectedDataTypes.includes(item.value)}\n                                                            onChange={(e) => handleDataLayerSelection(e, true)} // Pass true for single-selection\n                                                        />\n                                                        <label htmlFor={item.value}>{item.name}</label>\n                                                    </div>\n                                                ))}\n                                                <hr/>\n\n                                                {MultipleSelectionLayers.map((item, index) => (\n                                                    <div key={index} className=\"form-check\">\n                                                        <input\n                                                            className=\"form-check-input\"\n                                                            type=\"checkbox\"\n                                                            id={item.value}\n                                                            value={item.value}\n                                                            checked={selectedDataTypes.includes(item.value)}\n                                                            onChange={(e) => handleDataLayerSelection(e, false)} // Pass false for multi-selection\n                                                        />\n                                                        <label htmlFor={item.value}>{item.name}</label>\n                                                    </div>\n                                                ))}\n\n\n\n                                            </div>\n                                        </div>\n                                    </div>\n\n                                </div>\n                            </div>\n\n\n\n\n\n\n                            {selectedBasemapLayer && selectedBasemapLayer.url && (\n                                <TileLayer\n                                    key={selectedBasemapLayer.url}\n                                    attribution={selectedBasemapLayer.attribution}\n                                    url={selectedBasemapLayer.url}\n                                    subdomains={selectedBasemapLayer.subdomains}\n                                />\n                            )}\n\n\n                            {selectedDataTypes.includes(\"utility_charges\") && ColorLegendsDataItem && (\n                                <>\n                                    <DynamicLegend ColorLegendsDataItem={ColorLegendsDataItem} selectedYear={selectedYear} setSelectedYear={setSelectedYear} />\n\n                                    <GeoJSON\n                                        key={selectedYear}\n                                        // style={{ fillColor: '#265073', weight: 2, color: 'blue', fillOpacity: \"0.5\" }}\n                                        style={DistrictStyle}\n                                        data={Buildings_Footprint.features}\n                                        onEachFeature={DistrictOnEachfeature}\n                                    />\n\n                                </>\n                            )}\n\n                            {selectedDataTypes.includes(\"buildings\") && (\n                                <>\n                                    <BuildingTypeLegend ColorLegendsDataItem={BuiuldingNameColorItem} />\n                                    <GeoJSON\n                                        key={selectedYear}\n                                        // style={{ fillColor: '#265073', weight: 2, color: 'blue', fillOpacity: \"0.5\" }}\n                                        style={BuildingStyle}\n                                        data={Buildings_Footprint.features}\n                                        onEachFeature={DistrictOnEachfeature}\n                                    />\n\n                                </>\n                            )}\n\n                            {selectedDataTypes.includes(\"water_gravity_pipe\") && (\n                                <>\n\n                                    <GeoJSON\n                                        data={water_gravity_pipe.features}\n                                        style={{\n                                            fillColor: 'none',\n                                            weight: 2,\n                                            color: 'blue',\n                                            interactive: true, // Ensure interaction is enabled for events\n                                        }}\n                                    // onEachFeature={(feature, layer) => {\n                                    //   // Click event handler\n                                    //   layer.on('hover', function (e) {\n                                    //     if (feature.properties && feature.properties[\"Layer\"]) {\n                                    //       const popupContent = `\n                                    //         <div>\n                                    //           Layer: ${feature.properties[\"Layer\"]}<br/>\n                                    //         </div>\n                                    //       `;\n                                    //       layer.bindTooltip(popupContent, { sticky: true });\n                                    //     }\n                                    //     layer.openTooltip();\n                                    //   });\n                                    // }}\n                                    />\n                                </>\n                            )}\n\n                            {selectedDataTypes.includes(\"water_pressure_pipe\") && (\n                                <>\n                                    <GeoJSON data={water_pressure_pipe.features} style={{\n                                        fillColor: 'none',\n                                        weight: 2,\n                                        color: 'purple',\n                                        interactive: false\n                                    }} />\n\n                                </>\n                            )}\n\n                            {selectedDataTypes.includes(\"water_pressure_structure\") && (\n                                <>\n                                    {water_pressure_structure && water_pressure_structure.features.map((item, index) => (\n                                        <Circle\n                                            key={index}\n                                            center={[\n                                                item.geometry.coordinates[1],\n                                                item.geometry.coordinates[0],\n                                            ]}\n                                            radius={2}\n                                            color=\"black\"\n                                            fillColor=\"blue\"\n                                            fillOpacity={0.6}\n                                        />\n                                    ))}\n\n                                </>\n                            )}\n\n\n\n\n\n\n\n                            <FiltererdJsonFeature selectedFeatureName={selectedFeatureName} />\n\n\n\n                            <BaseMap />\n                        </MapContainer>\n                    </div>\n                </div>\n\n                <div className='left_panel_equal'>\n\n\n                    {/* <select className=\"form-select\" aria-label=\"Default select example\">\n                            <option selected>Open this select menu</option>\n                            <option value=\"1\">One</option>\n                            <option value=\"2\">Two</option>\n                            <option value=\"3\">Three</option>\n                        </select> */}\n\n\n                    {selectedData && selectedData.length > 0 ? (\n\n                        < >\n                            {selectedData.map((data, index) => (\n                                <div className='card_container' key={index}>\n                                    <div className='card_heading_container'>\n                                        <div className='card_heading'>\n                                            <h5>PrimaryID: {data.PrimaryID} | Zone: {data.Zone}  </h5>\n                                        </div>\n                                    </div>\n\n\n\n                                    <div className='plots_heading_container'>\n                                        <div className='plots_heading'>\n                                            <h5>Annual Rates</h5>\n                                        </div>\n                                    </div>\n                                    <BarChart selectedData={data} />\n\n                                    <div className='plots_heading_container'>\n                                        <div className='plots_heading'>\n                                            <h5>Monthly Rates</h5>\n                                        </div>\n                                    </div>\n                                    <LineChart selectedData={data} />\n\n                                    <div className='plots_heading_container'>\n                                        <div className='plots_heading'>\n                                            <h5>Compare rates over years</h5>\n                                        </div>\n                                    </div>\n                                    <MonthlyBarChart selectedData={data} />\n                                </div>\n                            ))}\n\n                        </>\n                    ) : (\n                        <p>Loading...</p>\n                    )}\n\n\n\n\n\n\n                </div>\n\n            </div>\n        </div>\n    )\n}\n\nexport default HomePage"],"names":["BaseMapsLayers","name","url","subdomains","attribution","mapCenter","setInitialMapZoom","mapZoom","viewportWidth","window","innerWidth","setDragging","dragging","L","BaseMap","mousePosition","setMousePosition","useState","lat","lng","map","useMap","HandleMouseHover","useMapEvents","mousemove","e","latlng","_jsxs","_Fragment","children","_jsx","className","onClick","handleZoomToCenter","setView","FaHome","ScaleControl","_ref","selectedData","options","chart","height","type","zoom","enabled","stroke","curve","width","series","data","color","xaxis","categories","labels","rotate","tickPlacement","yaxis","title","text","tooltip","shared","intersect","ReactApexChart","selectedMonth","setSelectedMonth","xData","yData","undefined","push","value","onChange","target","style","marginRight","selectedFeatureName","filteredData","Buildings_Footprint","find","feature","properties","primaryID","Pane","GeoJSON","fillColor","weight","fillOpacity","fillDensityColor","ColorLegendsDataItem","density","valueColorsMap","Value","index","Colors","i","length","setSelectedYear","selectedYear","Title","Unit","reversedColors","reverse","reversedValues","backgroundColor","Labels","reversedLabels","SingleSelectionsLayers","MultipleSelectionLayers","HomePage","selectedBasemapLayer","setSelectedBasemapLayer","setSelectedFeatureName","setSelectedData","selectedDataTypes","setSelectedDataTypes","console","log","setIsLoading","useLoaderContext","handleDataLayerSelection","isSingleSelection","includes","filter","item","handleBasemapSelection","selectedItem","useEffect","filterFeatureData","BuildingData","PrimaryID","parseInt","warn","DistrictOnEachfeature","layer","on","popupContent","bindTooltip","sticky","openTooltip","MapContainer","fullscreenControl","center","border","margin","zoomSnap","maxZoom","minZoom","keyboard","doubleClickZoom","id","option","checked","htmlFor","TileLayer","DynamicLegend","DataItem","getDensityFromData","opacity","onEachFeature","BuildingTypeLegend","water_gravity_pipe","interactive","water_pressure_pipe","water_pressure_structure","Circle","geometry","coordinates","radius","FiltererdJsonFeature","Zone","BarChart","LineChart","MonthlyBarChart"],"sourceRoot":""}